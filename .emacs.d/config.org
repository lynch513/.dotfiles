 #+TITLE: Emacs config
 #+AUTHOR: lynch513@yandex.ru

* Package Management

** Setup package.el to work with MELPA

    #+begin_src emacs-lisp
      (require 'package)
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/"))
      (package-refresh-contents)
      (package-initialize)
    #+end_src

** Installing use-package

    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package) 
	(package-install 'use-package))
      (setq use-package-always-ensure t)
    #+end_src

* General Keybindings

    #+begin_src emacs-lisp
      (use-package general
	:config
	(general-evil-setup t))
      (nvmap :keymaps 'override :prefix "SPC"
	"SPC"   '(counsel-M-x :which-key "M-x")
	"c c"   '(compile :which-key "Compile")
	"c C"   '(recompile :which-key "Recompile")
	"h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
	"t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
      (nvmap :keymaps 'override :prefix "SPC"
	"m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
	"m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
	"m ."   '(counsel-org-goto :which-key "Counsel org goto")
	"m e"   '(org-export-dispatch :which-key "Org export dispatch")
	"m f"   '(org-footnote-new :which-key "Org footnote new")
	"m h"   '(org-toggle-heading :which-key "Org toggle heading")
	"m i"   '(org-toggle-item :which-key "Org toggle item")
	"m n"   '(org-store-link :which-key "Org store link")
	"m o"   '(org-set-property :which-key "Org set property")
	"m t"   '(org-todo :which-key "Org todo")
	"m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
	"m B"   '(org-babel-tangle :which-key "Org babel tangle")
	"m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
	"m T"   '(org-todo-list :which-key "Org todo list")
	"o a"   '(org-agenda :which-key "Org agenda"))
    #+end_src

* Startup Performance

** Garbage collection

    #+begin_src emacs-lisp
      ;; Using garbage magic hack
      (use-package gcmh
	:config
	(gcmh-mode 1))
      ;; Setting garbage collection threshold
      (setq gc-cons-threshold 402653184
	    gc-cons-percentage 0.6)
      ;; Profile emacs startup
      (add-hook 'emacs-startup-hook
		(lambda ()
		  (message "*** Emacs loaded in %s with %d garbage collections."
			   (format "%.2f seconds"
				   (float-time
				    (time-substract after-init-time before-init-time)))
			   gcs-done)))
      ;; Silence compiler warnings as they can be pretty disruptive
      ;; (setq comp-async-report-warnings-errors nil)
    #+end_src

** Native Compil

    #+begin_src emacs-lisp
      (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
      (setq native-comp-deferred-compilation nil))
      ;; In noninteractive sessions, prioritize non-byte-compiled source files to
      ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
      ;; to skip the mtime checks on every *.elc file.
      (setq load-prefer-newer noninteractive)
    #+end_src

** Runtime Performance

    #+begin_src emacs-lisp
      ;; Make gc pauses faster by decreasing the threshold
      (setq gc-cons-threshold (* 2 1000 1000))
    #+end_src

* Evil Mode

   #+begin_src emacs-lisp
     (use-package evil
       :init     ;; tweak evil's configuration before loading it
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (setq evil-undo-system 'undo-redo)
       (evil-mode))
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))
   #+end_src

* Undo system

   #+begin_src emacs-lisp
     ;;(use-package undo-fu)
   #+end_src

* Scrolling

   #+begin_src emacs-lisp
     (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
     (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
     (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
   #+end_src

* Graphical User Interface Settings
   
** Fonts

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
			 :font "JetBrainsMono NF"
			 :height 110
			 :weight 'light)
     (set-face-attribute 'variable-pitch nil
			 :font "JetBrainsMono NF"
			 :height 110
			 :weight 'light)
     (set-face-attribute 'fixed-pitch nil
			 :font "SauceCodePro Nerd Font"
			 :height 110
			 :weight 'light)
     ;; Makes commented text and keywords italics
     (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
     (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
     (setq-default line-spacing 0.12)
     ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected
     (add-to-list 'default-frame-alist '(font . "JetBrainsMono NF 11"))
   #+end_src

** Zooming In and Out

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-=") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)
   #+end_src

** Menu, Toolbar and Scrollbar

   #+begin_src emacs-lisp
     (menu-bar-mode t)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src

** Line Numbers and Truncated Lines

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode 1)
     (global-visual-line-mode t)
   #+end_src
   
** Theme

   #+begin_src emacs-lisp
     (use-package doom-themes)
     (setq doom-themes-enable-bold t
	   doom-themes-enable-italic t)
     (load-theme 'doom-one t)
   #+end_src

   #+begin_src emacs-lisp
     (use-package doom-modeline)
     (doom-modeline-mode 1)
   #+end_src

** All The Icons

   #+begin_src emacs-lisp
     (use-package all-the-icons)
   #+end_src

** EMOJIS

   #+begin_src emacs-lisp
     (use-package emojify
       :hook (after-init . global-emojify-mode))
   #+end_src
   
* Which Key

   #+begin_src emacs-lisp
     (use-package which-key
       :init
       (setq which-key-side-window-location 'bottom
	     which-key-sort-order #'which-key-key-order-alpha
	     which-key-sort-uppercase-first nil
	     which-key-add-column-padding 1
	     which-key-max-display-columns nil
	     which-key-min-display-lines 6
	     which-key-side-window-slot -10
	     which-key-side-window-max-height 0.25
	     which-key-idle-delay 0.8
	     which-key-max-description-length 25
	     which-key-allow-imprecise-window-fit t
	     which-key-separator " â†’ " ))
     (which-key-mode)
   #+end_src

* Dashboard

   #+begin_src emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-center-content nil)
       (setq dashboard-items '((recents . 5)
			       (agenda . 5)
			       (bookmarks . 3)))
			       ;;(projects . 3)
			       ;;(registers . 3)
       :config
       (dashboard-setup-startup-hook)
       (dashboard-modify-heading-icons '((recents . "file-text")
					 (bookmarks . "book"))))
   #+end_src

** Dashboard in Emacsclient

   #+begin_src emacs-lisp
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   #+end_src

* File Manager (Dired)

   #+begin_src emacs-lisp
     (use-package all-the-icons-dired)
     (use-package dired-open)
     (use-package peep-dired)

     (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "d d" '(dired :which-key "Open dired")
       "d j" '(dired-jump :which-key "Dired jump to current")
       "d p" '(peep-dired :which-key "Peep-dired"))

     (with-eval-after-load 'dired
       (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
       (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
       (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
       (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

     (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
     ;; Get file icons in dired
     (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
   #+end_src

* Delete Selection Mode

   #+begin_src emacs-lisp
     (delete-selection-mode t)
   #+end_src

* Useful File Functions

   #+begin_src emacs-lisp
     (defun dt/show-and-copy-buffer-path ()
       "Show and copy the full path to the current file in the minibuffer."
       (interactive)
       ;; list-buffers-directory is the variable set in dired buffers
       (let ((file-name (or (buffer-file-name) list-buffers-directory)))
	 (if file-name
	     (message (kill-new file-name))
	   (error "Buffer not visiting a file"))))
     (defun dt/show-buffer-path-name ()
       "Show the full path to the current file in the minibuffer."
       (interactive)
       (let ((file-name (buffer-file-name)))
	 (if file-name
	     (progn
	       (message file-name)
	       (kill-new file-name))
	   (error "Buffer not visiting a file"))))
   #+end_src

* System clipboard

   #+begin_src emacs-lisp
     (setq x-select-enable-clipboard t)
   #+end_src

* Keybindings

Remap Escape key to Ctrl-L in evil mode

   #+begin_src emacs-lisp
     (define-key evil-insert-state-map (kbd "C-l") 'evil-normal-state)
   #+end_src

** Buffers and Bookmarks

   #+begin_src emacs-lisp
     (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "b b" '(ibuffer :which-key "Ibuffer")
       "b c" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k" '(kill-current-buffer :whick-key "Kill current buffer")
       "b n" '(next-buffer :which-key "Next buffer")
       "b p" '(previous-buffer :which-key "Previous buffer")
       "b B" '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K" '(kill-buffer :which-key "Kill buffer"))
   #+end_src

** Evaluate ELisp Expressions

   #+begin_src emacs-lisp
     (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "e b" '(eval-buffer :which-key "Eval elisp in buffer")
       "e d" '(eval-defun :which-key "Eval defun")
       "e e" '(eval-expression :which-key "Eval elisp expression")
       "e l" '(eval-last-sexp :which-key "Eval last sexression")
       "e r" '(eval-region :which-key "Eval region"))
   #+end_src

** File-related Keybindings

   #+begin_src emacs-lisp
     (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "." '(find-file :which-key "Find file")
       "f f" '(find-file :which-key "Find file")
       "f r" '(counsel-recentf :which-key "Recent files")
       "f s" '(save-buffer :which-key "Save file")
       "f y" '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C" '(copy-file :which-key "Copy file")
       "f D" '(delete-file :which-key "Delete file")
       "f R" '(rename-file :which-key "Rename file")
       "f S" '(write-file :which-key "Save file as"))
   #+end_src

** Split and Window Controls

   #+begin_src emacs-lisp
     (winner-mode 1)
     (nvmap :prefix "SPC"
	    ;; Window splits
	    "w c"   '(evil-window-delete :which-key "Close window")
	    "w n"   '(evil-window-new :which-key "New window")
	    "w s"   '(evil-window-split :which-key "Horizontal split window")
	    "w v"   '(evil-window-vsplit :which-key "Vertical split window")
	    ;; Window motions
	    "w h"   '(evil-window-left :which-key "Window left")
	    "w j"   '(evil-window-down :which-key "Window down")
	    "w k"   '(evil-window-up :which-key "Window up")
	    "w l"   '(evil-window-right :which-key "Window right")
	    "w w"   '(evil-window-next :which-key "Goto next window")
	    ;; winner mode
	    "w <left>"  '(winner-undo :which-key "Winner undo")
	    "w <right>" '(winner-redo :which-key "Winner redo"))
   #+end_src

